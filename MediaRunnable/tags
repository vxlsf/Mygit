!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CREATED	Thread.h	/^        CREATED,    \/\/ After call pthread_create() but the runnable is not run.$/;"	e	enum:recordredis::__anon1
Cond	ThreadSync.h	/^    Cond() { pthread_cond_init(&_cond, NULL); }$/;"	f	class:recordredis::Cond
Cond	ThreadSync.h	/^class Cond {$/;"	c	namespace:recordredis
DEFAULT_MAXQUEUESIZE	TaskQueue.h	/^const int DEFAULT_MAXQUEUESIZE = 100;   \/\/ Max task count$/;"	v
DEFAULT_THREADNUMBER	TaskThreadPool.h	/^const int DEFAULT_THREADNUMBER = 4;$/;"	v
Lock	ThreadSync.h	/^    void Lock() { pthread_mutex_lock(&_mutex); }$/;"	f	class:recordredis::Mutex
Mutex	ThreadSync.h	/^    Mutex() {$/;"	f	class:recordredis::Mutex
Mutex	ThreadSync.h	/^class Mutex {$/;"	c	namespace:recordredis
MutexGuard	ThreadSync.h	/^    MutexGuard(Mutex *mutex) : _mutex(mutex) {$/;"	f	class:recordredis::MutexGuard
MutexGuard	ThreadSync.h	/^class MutexGuard {$/;"	c	namespace:recordredis
NONE	Thread.h	/^        NONE,       \/\/ Before call pthread_create() or after call pthread_join().$/;"	e	enum:recordredis::__anon1
PMGW_RUNNABLE_H_	Runnable.h	3;"	d
PMGW_TASKQUEUE_H_	TaskQueue.h	9;"	d
PMGW_TASKRUNNABLE_H_	TaskRunnable.h	9;"	d
PMGW_TASK_H_	Task.h	3;"	d
PMGW_THREADSYNC_H_	ThreadSync.h	9;"	d
PMGW_THREAD_H_	Thread.h	3;"	d
RUNNING	Thread.h	/^        RUNNING,    \/\/ Runnable is running.$/;"	e	enum:recordredis::__anon1
RdLock	ThreadSync.h	/^    int RdLock() { return pthread_rwlock_rdlock(&_rwlock); }$/;"	f	class:recordredis::RwLock
Runnable	Runnable.cpp	/^Runnable::Runnable()$/;"	f	class:recordredis::Runnable
Runnable	Runnable.h	/^class Runnable {$/;"	c	namespace:recordredis
RwLock	ThreadSync.h	/^    RwLock() { pthread_rwlock_init(&_rwlock, NULL); }$/;"	f	class:recordredis::RwLock
RwLock	ThreadSync.h	/^class RwLock {$/;"	c	namespace:recordredis
RwLockGuard	ThreadSync.h	/^    RwLockGuard(RwLock *rwlock, int type) : _rwlock(rwlock) {$/;"	f	class:recordredis::RwLockGuard
RwLockGuard	ThreadSync.h	/^class RwLockGuard {$/;"	c	namespace:recordredis
RwLockType_Read	ThreadSync.h	/^    enum {RwLockType_Read = 0, RwLockType_Write = 1, };$/;"	e	enum:recordredis::RwLockGuard::__anon2
RwLockType_Write	ThreadSync.h	/^    enum {RwLockType_Read = 0, RwLockType_Write = 1, };$/;"	e	enum:recordredis::RwLockGuard::__anon2
STOPPED	Thread.h	/^        STOPPED,    \/\/ Runnable was stoped, but not call pthread_join().$/;"	e	enum:recordredis::__anon1
Singal	ThreadSync.h	/^    void Singal() { pthread_cond_signal(&_cond); }$/;"	f	class:recordredis::Cond
TASKTHREADPOOL_H_	TaskThreadPool.h	3;"	d
THREAD_STATUS	Thread.h	/^} THREAD_STATUS;$/;"	t	namespace:recordredis	typeref:enum:recordredis::__anon1
Task	Task.cpp	/^Task::Task(bool deleteFlag) :$/;"	f	class:recordredis::Task
Task	Task.h	/^class Task {$/;"	c	namespace:recordredis
TaskQueue	TaskQueue.cpp	/^TaskQueue::TaskQueue(int maxQueueSize)$/;"	f	class:TaskQueue
TaskQueue	TaskQueue.h	/^class TaskQueue {$/;"	c	namespace:recordredis
TaskRunnable	TaskRunnable.cpp	/^TaskRunnable::TaskRunnable()$/;"	f	class:recordredis::TaskRunnable
TaskRunnable	TaskRunnable.h	/^class TaskRunnable : public Runnable {$/;"	c	namespace:recordredis
TaskThreadPool	TaskThreadPool.cpp	/^TaskThreadPool::TaskThreadPool(const std::string &prefix, int threadnumber)$/;"	f	class:recordredis::TaskThreadPool
TaskThreadPool	TaskThreadPool.h	/^class TaskThreadPool {$/;"	c	namespace:recordredis
Thread	Thread.cpp	/^Thread::Thread()$/;"	f	class:recordredis::Thread
Thread	Thread.h	/^class Thread {$/;"	c	namespace:recordredis
TryLock	ThreadSync.h	/^    bool TryLock() {$/;"	f	class:recordredis::Mutex
TryRdLock	ThreadSync.h	/^    int TryRdLock() { return pthread_rwlock_tryrdlock(&_rwlock); }$/;"	f	class:recordredis::RwLock
TryWrLock	ThreadSync.h	/^    int TryWrLock() { return pthread_rwlock_trywrlock(&_rwlock); }$/;"	f	class:recordredis::RwLock
UnLock	ThreadSync.h	/^    int UnLock() { return pthread_rwlock_unlock(&_rwlock); }$/;"	f	class:recordredis::RwLock
UnLock	ThreadSync.h	/^    void UnLock() { pthread_mutex_unlock(&_mutex); }$/;"	f	class:recordredis::Mutex
Wait	ThreadSync.h	/^    void Wait(Mutex &mutex) { pthread_cond_wait(&_cond, &mutex._mutex); }$/;"	f	class:recordredis::Cond
WrLock	ThreadSync.h	/^    int WrLock() { return pthread_rwlock_wrlock(&_rwlock); }$/;"	f	class:recordredis::RwLock
_attr	Thread.h	/^    pthread_attr_t _attr;$/;"	m	class:recordredis::Thread
_cond	TaskQueue.h	/^    Cond _cond;    $/;"	m	class:recordredis::TaskQueue
_cond	ThreadSync.h	/^    pthread_cond_t _cond;$/;"	m	class:recordredis::Cond
_delFlag	Runnable.h	/^    bool _delFlag;$/;"	m	class:recordredis::Runnable
_deleteFlag	Task.h	/^    bool _deleteFlag;$/;"	m	class:recordredis::Task
_maxQueueSize	TaskQueue.h	/^    unsigned int _maxQueueSize;$/;"	m	class:recordredis::TaskQueue
_mutex	ThreadSync.h	/^    Mutex *_mutex;$/;"	m	class:recordredis::MutexGuard
_mutex	ThreadSync.h	/^    pthread_mutex_t _mutex;$/;"	m	class:recordredis::Mutex
_pthread	Thread.h	/^    pthread_t _pthread;$/;"	m	class:recordredis::Thread
_queue	TaskQueue.h	/^    std::queue<Task*> _queue;$/;"	m	class:recordredis::TaskQueue
_queue	TaskRunnable.h	/^    TaskQueue *_queue;$/;"	m	class:recordredis::TaskRunnable
_queueMutex	TaskQueue.h	/^    Mutex _queueMutex;$/;"	m	class:recordredis::TaskQueue
_queueName	TaskQueue.h	/^    std::string _queueName;$/;"	m	class:recordredis::TaskQueue
_runnable	Thread.h	/^    Runnable *_runnable;$/;"	m	class:recordredis::Thread
_rwlock	ThreadSync.h	/^    RwLock *_rwlock;$/;"	m	class:recordredis::RwLockGuard
_rwlock	ThreadSync.h	/^    pthread_rwlock_t _rwlock;$/;"	m	class:recordredis::RwLock
_status	Thread.h	/^    THREAD_STATUS _status;$/;"	m	class:recordredis::Thread
_stop	TaskThreadPool.h	/^    bool _stop;	\/\/when this is true, stop each thread$/;"	m	class:recordredis::TaskThreadPool
_stopFlag	Runnable.h	/^    bool _stopFlag;$/;"	m	class:recordredis::Runnable
_taskQueue	TaskThreadPool.h	/^    TaskQueue *_taskQueue;$/;"	m	class:recordredis::TaskThreadPool
_threadName	Runnable.h	/^    std::string _threadName;$/;"	m	class:recordredis::Runnable
_threadName	Thread.h	/^    std::string _threadName;$/;"	m	class:recordredis::Thread
_threadNamePrefix	TaskThreadPool.h	/^    std::string _threadNamePrefix;$/;"	m	class:recordredis::TaskThreadPool
_threadSpecificData	Task.h	/^    void *_threadSpecificData;$/;"	m	class:recordredis::Task
_threadnumber	TaskThreadPool.h	/^    int _threadnumber;$/;"	m	class:recordredis::TaskThreadPool
_threads	TaskThreadPool.h	/^    Thread *_threads;$/;"	m	class:recordredis::TaskThreadPool
addTask	TaskQueue.cpp	/^int TaskQueue::addTask(Task *task) {$/;"	f	class:TaskQueue
clean	Runnable.h	/^    virtual void clean() {}$/;"	f	class:recordredis::Runnable
clean	TaskRunnable.h	/^    virtual void clean(){}$/;"	f	class:recordredis::TaskRunnable
delRunnable	Thread.cpp	/^void Thread::delRunnable() {$/;"	f	class:recordredis::Thread
getIdleThreadCount	TaskThreadPool.cpp	/^int TaskThreadPool::getIdleThreadCount() {$/;"	f	class:recordredis::TaskThreadPool
getQueueCount	TaskQueue.cpp	/^int TaskQueue::getQueueCount() {$/;"	f	class:TaskQueue
getQueueName	TaskQueue.h	/^    std::string getQueueName() { return _queueName; }$/;"	f	class:recordredis::TaskQueue
getRunnable	Thread.h	/^    Runnable *getRunnable() { return _runnable; }$/;"	f	class:recordredis::Thread
getStatus	Thread.h	/^    THREAD_STATUS getStatus() { return _status; }$/;"	f	class:recordredis::Thread
getTask	TaskQueue.cpp	/^Task *TaskQueue::getTask() {$/;"	f	class:TaskQueue
getTaskQueue	TaskThreadPool.h	/^    TaskQueue *getTaskQueue() { return _taskQueue; }$/;"	f	class:recordredis::TaskThreadPool
getThreadCount	TaskThreadPool.h	/^    int getThreadCount() { return _threadnumber; }$/;"	f	class:recordredis::TaskThreadPool
getThreadName	Runnable.h	/^    std::string &getThreadName() { return _threadName; }$/;"	f	class:recordredis::Runnable
getThreadName	Thread.h	/^    std::string getThreadName() { return _threadName; }$/;"	f	class:recordredis::Thread
getThreadSpecificData	Task.h	/^    void *getThreadSpecificData() { return _threadSpecificData; }$/;"	f	class:recordredis::Task
getWorkThreadCount	TaskThreadPool.cpp	/^int TaskThreadPool::getWorkThreadCount() {$/;"	f	class:recordredis::TaskThreadPool
initialize	Runnable.h	/^    virtual bool initialize() { return true; }$/;"	f	class:recordredis::Runnable
initialize	TaskRunnable.h	/^    virtual bool initialize() { return true;};$/;"	f	class:recordredis::TaskRunnable
join	Thread.h	/^    void join() {$/;"	f	class:recordredis::Thread
recordredis	Runnable.cpp	/^namespace  recordredis$/;"	n	file:
recordredis	Runnable.h	/^namespace recordredis$/;"	n
recordredis	Task.cpp	/^namespace recordredis {$/;"	n	file:
recordredis	Task.h	/^namespace recordredis {$/;"	n
recordredis	TaskQueue.h	/^namespace recordredis {$/;"	n
recordredis	TaskRunnable.cpp	/^namespace recordredis {$/;"	n	file:
recordredis	TaskRunnable.h	/^namespace recordredis{$/;"	n
recordredis	TaskThreadPool.cpp	/^namespace recordredis {$/;"	n	file:
recordredis	TaskThreadPool.h	/^namespace recordredis {$/;"	n
recordredis	Thread.cpp	/^namespace recordredis  {$/;"	n	file:
recordredis	Thread.h	/^namespace recordredis {$/;"	n
recordredis	ThreadSync.cpp	/^namespace recordredis {$/;"	n	file:
recordredis	ThreadSync.h	/^namespace recordredis {$/;"	n
run	TaskRunnable.cpp	/^int TaskRunnable::run() {$/;"	f	class:recordredis::TaskRunnable
setDelFlag	Runnable.h	/^    void setDelFlag(bool delFlag) { _delFlag = delFlag; }$/;"	f	class:recordredis::Runnable
setDeleteFlag	Task.h	/^    void setDeleteFlag(bool deleteFlag) { _deleteFlag = deleteFlag; }$/;"	f	class:recordredis::Task
setQueueName	TaskQueue.h	/^    void setQueueName(std::string queue_name) { _queueName = queue_name; }$/;"	f	class:recordredis::TaskQueue
setRunnable	Thread.h	/^    void setRunnable(Runnable *runnable) { _runnable = runnable; }$/;"	f	class:recordredis::Thread
setStatus	Thread.h	/^    void setStatus(THREAD_STATUS status) { _status = status; }$/;"	f	class:recordredis::Thread
setTaskQueue	TaskRunnable.h	/^    void setTaskQueue(TaskQueue *queue) { _queue = queue;}$/;"	f	class:recordredis::TaskRunnable
setTaskQueue	TaskThreadPool.h	/^    void setTaskQueue(TaskQueue * queue) { _taskQueue = queue;}$/;"	f	class:recordredis::TaskThreadPool
setThreadName	Runnable.h	/^    void setThreadName( std::string name ) { _threadName = name; }$/;"	f	class:recordredis::Runnable
setThreadName	Thread.h	/^    void setThreadName(std::string threadName) { _threadName = threadName; }$/;"	f	class:recordredis::Thread
setThreadSpecificData	Task.h	/^    void setThreadSpecificData(void * data) { _threadSpecificData = data; }$/;"	f	class:recordredis::Task
shouldDel	Runnable.h	/^    bool shouldDel() { return _delFlag; }$/;"	f	class:recordredis::Runnable
shouldDelete	Task.h	/^    bool shouldDelete() { return _deleteFlag; }$/;"	f	class:recordredis::Task
shouldStop	Runnable.h	/^    bool shouldStop() { return _stopFlag;}$/;"	f	class:recordredis::Runnable
singalQueue	TaskQueue.h	/^    void singalQueue() {$/;"	f	class:recordredis::TaskQueue
start	TaskThreadPool.cpp	/^bool TaskThreadPool::start() {$/;"	f	class:recordredis::TaskThreadPool
start	Thread.cpp	/^int Thread::start(Runnable * runnable) {$/;"	f	class:recordredis::Thread
stop	Runnable.h	/^    virtual void stop() { _stopFlag = true; }$/;"	f	class:recordredis::Runnable
stop	TaskRunnable.cpp	/^void TaskRunnable::stop() {$/;"	f	class:recordredis::TaskRunnable
stop	TaskThreadPool.cpp	/^void TaskThreadPool::stop() {$/;"	f	class:recordredis::TaskThreadPool
stop	Thread.cpp	/^void Thread::stop() {$/;"	f	class:recordredis::Thread
threadFunction	Thread.cpp	/^void* Thread::threadFunction(void *argv) {$/;"	f	class:recordredis::Thread
~Cond	ThreadSync.h	/^    virtual ~Cond() { pthread_cond_destroy(&_cond); }$/;"	f	class:recordredis::Cond
~Mutex	ThreadSync.h	/^    virtual ~Mutex() { pthread_mutex_destroy(&_mutex); }$/;"	f	class:recordredis::Mutex
~MutexGuard	ThreadSync.h	/^    ~MutexGuard() {$/;"	f	class:recordredis::MutexGuard
~Runnable	Runnable.cpp	/^Runnable::~Runnable() {$/;"	f	class:recordredis::Runnable
~RwLock	ThreadSync.h	/^    ~RwLock() { pthread_rwlock_destroy(&_rwlock); }$/;"	f	class:recordredis::RwLock
~RwLockGuard	ThreadSync.h	/^    ~RwLockGuard() {$/;"	f	class:recordredis::RwLockGuard
~Task	Task.cpp	/^Task::~Task() {$/;"	f	class:recordredis::Task
~TaskQueue	TaskQueue.cpp	/^TaskQueue::~TaskQueue() {$/;"	f	class:TaskQueue
~TaskRunnable	TaskRunnable.cpp	/^TaskRunnable::~TaskRunnable() {$/;"	f	class:recordredis::TaskRunnable
~TaskThreadPool	TaskThreadPool.cpp	/^TaskThreadPool::~TaskThreadPool() {$/;"	f	class:recordredis::TaskThreadPool
~Thread	Thread.cpp	/^Thread::~Thread() {$/;"	f	class:recordredis::Thread
