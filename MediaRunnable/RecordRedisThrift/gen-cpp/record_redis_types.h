/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef record_redis_TYPES_H
#define record_redis_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>






class reqinfo {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  reqinfo() : key(), value(), type() {
  }

  virtual ~reqinfo() throw() {}

  std::string key;
  std::string value;
  std::string type;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const reqinfo & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const reqinfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reqinfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(reqinfo &a, reqinfo &b);

typedef struct _resinfo__isset {
  _resinfo__isset() : keyValueMap(false) {}
  bool keyValueMap;
} _resinfo__isset;

class resinfo {
 public:

  static const char* ascii_fingerprint; // = "423FCEB52AD284630EC4FAA040869E1D";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x3F,0xCE,0xB5,0x2A,0xD2,0x84,0x63,0x0E,0xC4,0xFA,0xA0,0x40,0x86,0x9E,0x1D};

  resinfo() {
  }

  virtual ~resinfo() throw() {}

  std::map<std::string, std::string>  keyValueMap;

  _resinfo__isset __isset;

  void __set_keyValueMap(const std::map<std::string, std::string> & val) {
    keyValueMap = val;
    __isset.keyValueMap = true;
  }

  bool operator == (const resinfo & rhs) const
  {
    if (__isset.keyValueMap != rhs.__isset.keyValueMap)
      return false;
    else if (__isset.keyValueMap && !(keyValueMap == rhs.keyValueMap))
      return false;
    return true;
  }
  bool operator != (const resinfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resinfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(resinfo &a, resinfo &b);



#endif
