/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef recordService_H
#define recordService_H

#include <thrift/TDispatchProcessor.h>
#include "record_redis_types.h"



class recordServiceIf {
 public:
  virtual ~recordServiceIf() {}
  virtual void Update(std::string& _return, const reqinfo& request) = 0;
  virtual void GetAllKeyValue(resinfo& _return, const std::string& type) = 0;
  virtual void CheckOneRecord(std::string& _return, const reqinfo& request) = 0;
  virtual void DelOneRecord(std::string& _return, const reqinfo& request) = 0;
  virtual void PushRunnableType(std::string& _return, const std::string& type) = 0;
  virtual void DelRunnableType(std::string& _return, const std::string& type) = 0;
};

class recordServiceIfFactory {
 public:
  typedef recordServiceIf Handler;

  virtual ~recordServiceIfFactory() {}

  virtual recordServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(recordServiceIf* /* handler */) = 0;
};

class recordServiceIfSingletonFactory : virtual public recordServiceIfFactory {
 public:
  recordServiceIfSingletonFactory(const boost::shared_ptr<recordServiceIf>& iface) : iface_(iface) {}
  virtual ~recordServiceIfSingletonFactory() {}

  virtual recordServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(recordServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<recordServiceIf> iface_;
};

class recordServiceNull : virtual public recordServiceIf {
 public:
  virtual ~recordServiceNull() {}
  void Update(std::string& /* _return */, const reqinfo& /* request */) {
    return;
  }
  void GetAllKeyValue(resinfo& /* _return */, const std::string& /* type */) {
    return;
  }
  void CheckOneRecord(std::string& /* _return */, const reqinfo& /* request */) {
    return;
  }
  void DelOneRecord(std::string& /* _return */, const reqinfo& /* request */) {
    return;
  }
  void PushRunnableType(std::string& /* _return */, const std::string& /* type */) {
    return;
  }
  void DelRunnableType(std::string& /* _return */, const std::string& /* type */) {
    return;
  }
};

typedef struct _recordService_Update_args__isset {
  _recordService_Update_args__isset() : request(false) {}
  bool request;
} _recordService_Update_args__isset;

class recordService_Update_args {
 public:

  recordService_Update_args() {
  }

  virtual ~recordService_Update_args() throw() {}

  reqinfo request;

  _recordService_Update_args__isset __isset;

  void __set_request(const reqinfo& val) {
    request = val;
  }

  bool operator == (const recordService_Update_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const recordService_Update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_Update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class recordService_Update_pargs {
 public:


  virtual ~recordService_Update_pargs() throw() {}

  const reqinfo* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_Update_result__isset {
  _recordService_Update_result__isset() : success(false) {}
  bool success;
} _recordService_Update_result__isset;

class recordService_Update_result {
 public:

  recordService_Update_result() : success() {
  }

  virtual ~recordService_Update_result() throw() {}

  std::string success;

  _recordService_Update_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const recordService_Update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const recordService_Update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_Update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_Update_presult__isset {
  _recordService_Update_presult__isset() : success(false) {}
  bool success;
} _recordService_Update_presult__isset;

class recordService_Update_presult {
 public:


  virtual ~recordService_Update_presult() throw() {}

  std::string* success;

  _recordService_Update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _recordService_GetAllKeyValue_args__isset {
  _recordService_GetAllKeyValue_args__isset() : type(false) {}
  bool type;
} _recordService_GetAllKeyValue_args__isset;

class recordService_GetAllKeyValue_args {
 public:

  recordService_GetAllKeyValue_args() : type() {
  }

  virtual ~recordService_GetAllKeyValue_args() throw() {}

  std::string type;

  _recordService_GetAllKeyValue_args__isset __isset;

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const recordService_GetAllKeyValue_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const recordService_GetAllKeyValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_GetAllKeyValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class recordService_GetAllKeyValue_pargs {
 public:


  virtual ~recordService_GetAllKeyValue_pargs() throw() {}

  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_GetAllKeyValue_result__isset {
  _recordService_GetAllKeyValue_result__isset() : success(false) {}
  bool success;
} _recordService_GetAllKeyValue_result__isset;

class recordService_GetAllKeyValue_result {
 public:

  recordService_GetAllKeyValue_result() {
  }

  virtual ~recordService_GetAllKeyValue_result() throw() {}

  resinfo success;

  _recordService_GetAllKeyValue_result__isset __isset;

  void __set_success(const resinfo& val) {
    success = val;
  }

  bool operator == (const recordService_GetAllKeyValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const recordService_GetAllKeyValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_GetAllKeyValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_GetAllKeyValue_presult__isset {
  _recordService_GetAllKeyValue_presult__isset() : success(false) {}
  bool success;
} _recordService_GetAllKeyValue_presult__isset;

class recordService_GetAllKeyValue_presult {
 public:


  virtual ~recordService_GetAllKeyValue_presult() throw() {}

  resinfo* success;

  _recordService_GetAllKeyValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _recordService_CheckOneRecord_args__isset {
  _recordService_CheckOneRecord_args__isset() : request(false) {}
  bool request;
} _recordService_CheckOneRecord_args__isset;

class recordService_CheckOneRecord_args {
 public:

  recordService_CheckOneRecord_args() {
  }

  virtual ~recordService_CheckOneRecord_args() throw() {}

  reqinfo request;

  _recordService_CheckOneRecord_args__isset __isset;

  void __set_request(const reqinfo& val) {
    request = val;
  }

  bool operator == (const recordService_CheckOneRecord_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const recordService_CheckOneRecord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_CheckOneRecord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class recordService_CheckOneRecord_pargs {
 public:


  virtual ~recordService_CheckOneRecord_pargs() throw() {}

  const reqinfo* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_CheckOneRecord_result__isset {
  _recordService_CheckOneRecord_result__isset() : success(false) {}
  bool success;
} _recordService_CheckOneRecord_result__isset;

class recordService_CheckOneRecord_result {
 public:

  recordService_CheckOneRecord_result() : success() {
  }

  virtual ~recordService_CheckOneRecord_result() throw() {}

  std::string success;

  _recordService_CheckOneRecord_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const recordService_CheckOneRecord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const recordService_CheckOneRecord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_CheckOneRecord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_CheckOneRecord_presult__isset {
  _recordService_CheckOneRecord_presult__isset() : success(false) {}
  bool success;
} _recordService_CheckOneRecord_presult__isset;

class recordService_CheckOneRecord_presult {
 public:


  virtual ~recordService_CheckOneRecord_presult() throw() {}

  std::string* success;

  _recordService_CheckOneRecord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _recordService_DelOneRecord_args__isset {
  _recordService_DelOneRecord_args__isset() : request(false) {}
  bool request;
} _recordService_DelOneRecord_args__isset;

class recordService_DelOneRecord_args {
 public:

  recordService_DelOneRecord_args() {
  }

  virtual ~recordService_DelOneRecord_args() throw() {}

  reqinfo request;

  _recordService_DelOneRecord_args__isset __isset;

  void __set_request(const reqinfo& val) {
    request = val;
  }

  bool operator == (const recordService_DelOneRecord_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const recordService_DelOneRecord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_DelOneRecord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class recordService_DelOneRecord_pargs {
 public:


  virtual ~recordService_DelOneRecord_pargs() throw() {}

  const reqinfo* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_DelOneRecord_result__isset {
  _recordService_DelOneRecord_result__isset() : success(false) {}
  bool success;
} _recordService_DelOneRecord_result__isset;

class recordService_DelOneRecord_result {
 public:

  recordService_DelOneRecord_result() : success() {
  }

  virtual ~recordService_DelOneRecord_result() throw() {}

  std::string success;

  _recordService_DelOneRecord_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const recordService_DelOneRecord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const recordService_DelOneRecord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_DelOneRecord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_DelOneRecord_presult__isset {
  _recordService_DelOneRecord_presult__isset() : success(false) {}
  bool success;
} _recordService_DelOneRecord_presult__isset;

class recordService_DelOneRecord_presult {
 public:


  virtual ~recordService_DelOneRecord_presult() throw() {}

  std::string* success;

  _recordService_DelOneRecord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _recordService_PushRunnableType_args__isset {
  _recordService_PushRunnableType_args__isset() : type(false) {}
  bool type;
} _recordService_PushRunnableType_args__isset;

class recordService_PushRunnableType_args {
 public:

  recordService_PushRunnableType_args() : type() {
  }

  virtual ~recordService_PushRunnableType_args() throw() {}

  std::string type;

  _recordService_PushRunnableType_args__isset __isset;

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const recordService_PushRunnableType_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const recordService_PushRunnableType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_PushRunnableType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class recordService_PushRunnableType_pargs {
 public:


  virtual ~recordService_PushRunnableType_pargs() throw() {}

  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_PushRunnableType_result__isset {
  _recordService_PushRunnableType_result__isset() : success(false) {}
  bool success;
} _recordService_PushRunnableType_result__isset;

class recordService_PushRunnableType_result {
 public:

  recordService_PushRunnableType_result() : success() {
  }

  virtual ~recordService_PushRunnableType_result() throw() {}

  std::string success;

  _recordService_PushRunnableType_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const recordService_PushRunnableType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const recordService_PushRunnableType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_PushRunnableType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_PushRunnableType_presult__isset {
  _recordService_PushRunnableType_presult__isset() : success(false) {}
  bool success;
} _recordService_PushRunnableType_presult__isset;

class recordService_PushRunnableType_presult {
 public:


  virtual ~recordService_PushRunnableType_presult() throw() {}

  std::string* success;

  _recordService_PushRunnableType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _recordService_DelRunnableType_args__isset {
  _recordService_DelRunnableType_args__isset() : type(false) {}
  bool type;
} _recordService_DelRunnableType_args__isset;

class recordService_DelRunnableType_args {
 public:

  recordService_DelRunnableType_args() : type() {
  }

  virtual ~recordService_DelRunnableType_args() throw() {}

  std::string type;

  _recordService_DelRunnableType_args__isset __isset;

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const recordService_DelRunnableType_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const recordService_DelRunnableType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_DelRunnableType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class recordService_DelRunnableType_pargs {
 public:


  virtual ~recordService_DelRunnableType_pargs() throw() {}

  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_DelRunnableType_result__isset {
  _recordService_DelRunnableType_result__isset() : success(false) {}
  bool success;
} _recordService_DelRunnableType_result__isset;

class recordService_DelRunnableType_result {
 public:

  recordService_DelRunnableType_result() : success() {
  }

  virtual ~recordService_DelRunnableType_result() throw() {}

  std::string success;

  _recordService_DelRunnableType_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const recordService_DelRunnableType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const recordService_DelRunnableType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const recordService_DelRunnableType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _recordService_DelRunnableType_presult__isset {
  _recordService_DelRunnableType_presult__isset() : success(false) {}
  bool success;
} _recordService_DelRunnableType_presult__isset;

class recordService_DelRunnableType_presult {
 public:


  virtual ~recordService_DelRunnableType_presult() throw() {}

  std::string* success;

  _recordService_DelRunnableType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class recordServiceClient : virtual public recordServiceIf {
 public:
  recordServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  recordServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Update(std::string& _return, const reqinfo& request);
  void send_Update(const reqinfo& request);
  void recv_Update(std::string& _return);
  void GetAllKeyValue(resinfo& _return, const std::string& type);
  void send_GetAllKeyValue(const std::string& type);
  void recv_GetAllKeyValue(resinfo& _return);
  void CheckOneRecord(std::string& _return, const reqinfo& request);
  void send_CheckOneRecord(const reqinfo& request);
  void recv_CheckOneRecord(std::string& _return);
  void DelOneRecord(std::string& _return, const reqinfo& request);
  void send_DelOneRecord(const reqinfo& request);
  void recv_DelOneRecord(std::string& _return);
  void PushRunnableType(std::string& _return, const std::string& type);
  void send_PushRunnableType(const std::string& type);
  void recv_PushRunnableType(std::string& _return);
  void DelRunnableType(std::string& _return, const std::string& type);
  void send_DelRunnableType(const std::string& type);
  void recv_DelRunnableType(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class recordServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<recordServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (recordServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAllKeyValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckOneRecord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DelOneRecord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushRunnableType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DelRunnableType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  recordServiceProcessor(boost::shared_ptr<recordServiceIf> iface) :
    iface_(iface) {
    processMap_["Update"] = &recordServiceProcessor::process_Update;
    processMap_["GetAllKeyValue"] = &recordServiceProcessor::process_GetAllKeyValue;
    processMap_["CheckOneRecord"] = &recordServiceProcessor::process_CheckOneRecord;
    processMap_["DelOneRecord"] = &recordServiceProcessor::process_DelOneRecord;
    processMap_["PushRunnableType"] = &recordServiceProcessor::process_PushRunnableType;
    processMap_["DelRunnableType"] = &recordServiceProcessor::process_DelRunnableType;
  }

  virtual ~recordServiceProcessor() {}
};

class recordServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  recordServiceProcessorFactory(const ::boost::shared_ptr< recordServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< recordServiceIfFactory > handlerFactory_;
};

class recordServiceMultiface : virtual public recordServiceIf {
 public:
  recordServiceMultiface(std::vector<boost::shared_ptr<recordServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~recordServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<recordServiceIf> > ifaces_;
  recordServiceMultiface() {}
  void add(boost::shared_ptr<recordServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Update(std::string& _return, const reqinfo& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Update(_return, request);
    }
    ifaces_[i]->Update(_return, request);
    return;
  }

  void GetAllKeyValue(resinfo& _return, const std::string& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAllKeyValue(_return, type);
    }
    ifaces_[i]->GetAllKeyValue(_return, type);
    return;
  }

  void CheckOneRecord(std::string& _return, const reqinfo& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckOneRecord(_return, request);
    }
    ifaces_[i]->CheckOneRecord(_return, request);
    return;
  }

  void DelOneRecord(std::string& _return, const reqinfo& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DelOneRecord(_return, request);
    }
    ifaces_[i]->DelOneRecord(_return, request);
    return;
  }

  void PushRunnableType(std::string& _return, const std::string& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushRunnableType(_return, type);
    }
    ifaces_[i]->PushRunnableType(_return, type);
    return;
  }

  void DelRunnableType(std::string& _return, const std::string& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DelRunnableType(_return, type);
    }
    ifaces_[i]->DelRunnableType(_return, type);
    return;
  }

};



#endif
